import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;


class treeNode {
	int key;
	treeNode left, right;
	public treeNode(int i){
		this.key = i;
		left = right = null;				
	}
}

class tree {
	treeNode root;
	public tree(){
		root = null;
	}
	void printPostOrder() {
		printPostOrder(root);		
	}
	private void printPreOrder() {
		printPostOrder(root);		
	}
	private void printInOrder() {
		printInOrder(root);		
	}
	private void printLevelOrder() {
		printLevelOrder(root);		
	}
	private void maxDepth() {
		System.out.println(maxDepth(root));	
	}
	private void trimBST(){
		trimBST(root, 1, 3);
	}
	void printPostOrder(treeNode node){	
		if(node == null){
			return;
		}
		printPostOrder(node.left);
		printPostOrder(node.right);
		System.out.print(node.key + " ");
	}
	void printPreOrder(treeNode node){
		if(node == null){
			return;
		}
		System.out.print(node.key +" ");
		printPreOrder(node.left);
		printPreOrder(node.right);
	}
	void printInOrder(treeNode node){
		if(node == null){
			return;
		}
		printPreOrder(node.left);
		System.out.print(node.key +" ");
		printPreOrder(node.right);
	}
	void printLevelOrder(treeNode node){
		if(node == null){
			return;
		}
		Queue<treeNode> q = new LinkedList<treeNode>();
		q.add(node);
		while (! q.isEmpty() ){
			//Retrieves and removes head of the queue and return null if empty
			treeNode tempNode = q.poll();
			System.out.print(tempNode.key + " ");
			if(tempNode.left != null){
				q.add(tempNode.left);
			}
			if(tempNode.right != null){
				q.add(tempNode.right);
			}			
		}
	}
    public int maxDepth(treeNode root) {
    	int maxDepth = 0;
    	if(root == null){
    		return 0;
    	}
    	int lDepth = maxDepth(root.left);
    	int rDepth = maxDepth(root.right);
    	if(lDepth < rDepth){
    		maxDepth = rDepth + 1;
    		return maxDepth;
    	}
    	
    	maxDepth = lDepth + 1;
		return maxDepth;       
    }
    public  treeNode trimBST(treeNode root, int L, int R) {
    	if(root == null){
    		return null;
    	}
    	if(root.key < L) return trimBST(root.right, L, R);
    	if(root.key > R) return trimBST(root.left, L, R);
    	
    	root.left = trimBST(root.left, L, R);
    	root.right = trimBST(root.right, L, R);
		return root;       
    }
 
	public static void main(String[] args) {
		Btree t= new Btree();
		t.root = new treeNode(1);
		t.root.left = new treeNode(2);
		t.root.right = new treeNode(3);
		t.root.left.left = new treeNode(4);
		t.root.left.right = new treeNode(5);
		
		System.out.println("post order traversal");
		t.printPostOrder();
		System.out.println();
		
		System.out.println("pre order traversal");
		t.printPreOrder();
		System.out.println();
		
		System.out.println("In order traversal");
		t.printInOrder();
		System.out.println();
		
		System.out.println("Level order traversing");
		t.printLevelOrder();
		System.out.println();
		
		System.out.println("Max depth of a binary tree");
		t.maxDepth();
		System.out.println();
		
		System.out.println("trim bst");
		t.trimBST();
		
	}


}
