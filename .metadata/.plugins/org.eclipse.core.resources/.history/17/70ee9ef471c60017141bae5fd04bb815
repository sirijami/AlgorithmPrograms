
public class MaxSumPathBinaryTree {

	private static Node root;
	static int max_sum = Integer.MIN_VALUE;
	int curr_sum = 0;
	static Node targetLeafNode = null;
	
    void  maxSumPath(Node node, int sum){
		if(node != null){
			sum = sum + node.data;
			if(sum > curr_sum && node.left == null && node.right == null ){
				max_sum = curr_sum;
				targetLeafNode = node;
			}
			System.out.println("sum " + sum);
			System.out.println("max sum " + max_sum);
			maxSumPath(node.left, sum);
			maxSumPath(node.right, sum);			
		}
	}
	

	

	public static void main(String[] args) {
		MaxSumPathBinaryTree t = new MaxSumPathBinaryTree();
		t.root = new Node(2);
		t.root.left = new Node(10);
		t.root.right = new Node(5);
		t.root.left.left = new Node(-2);
		t.root.right.right = new Node(5);
		t.maxSumPath(t.root, 0);
		System.out.println("Max sum " + max_sum);
		t.path(root, targetLeafNode);
	}




	private void path(Node node, Node LeafNode) {
		if(node == null){
			return;
		}
		
	}

}
