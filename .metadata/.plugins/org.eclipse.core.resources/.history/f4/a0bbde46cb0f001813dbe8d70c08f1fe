class Node{
    public int data;
    public Node next;

    private Node(){}

    public Node(int data){
        this.data = data;
        this.next = null;
    }
}

class LinkList{
    public Node Head;
    public Node Last;

    public void AddDataHead(int data){
        Node add = new Node(data);
        add.next = Head;
        Head = add;
        Last = add;
    }

    public void AddDataTail(int data){
        Node add = new Node(data);
        if(Head == null){
            Head = add;
            return;
        }
        Node temp = Head;
        while(temp.next != null)
            temp = temp.next;
        temp.next = add;
        Last = add;
    }

    public void PrintList(){
        if(Head == null)
            return;
        Node temp = Head;
        while (temp != null){
            System.out.print(temp.data + "->");
            temp = temp.next;
        }
        System.out.print("null");
        System.out.println();
    }

    public int GetLength(){
        if(Head == null)
            return 0;
        Node temp = Head;
        int count = 1;
        while (temp.next != null){
            temp = temp.next;
            count++;
        }
        return count;
    }

    public void ReverseList() {
        if(Head == null || Head.next == null)
            return;

        Node prev = null;
        Node curr = Head;
        Node next = Head.next;

        while (next != null){
            curr.next = prev;
            prev = curr;
            curr = next;
            next = next.next;
        }
        curr.next = prev;
        Last = Head;
        Head = curr;
    }

    public Node Reverse(Node node){
        if(node == null || node.next == null)
            return null;

        Node prev = null;
        Node curr = node;
        Node next = node.next;

        while (next != null){
            curr.next = prev;
            prev = curr;
            curr = next;
            next = next.next;
        }
        curr.next = prev;
        node = curr;
        return node;
    }

    public void Replace(){
        if(Head == null || Head.next == null)
            return;
        ReverseList();

        int maxNum = -1;
        Node it = Head;
        while (it != null) {
            int temp = it.data;
            it.data = maxNum;
            it = it.next;

            if(temp > maxNum){
                maxNum = temp;
            }
        }

        ReverseList();
    }
}

public class ReplaceByGreatest {
    public static void main(String[] args){
        LinkList ll = new LinkList();
        ll.AddDataHead(16);
        ll.AddDataTail(17);
        ll.AddDataTail(4);
        ll.AddDataTail(3);
        ll.AddDataTail(5);
        ll.AddDataTail(2);
        //ll.PrintList();

        ll.Replace();
        ll.PrintList();

        System.out.println();
    }
}
