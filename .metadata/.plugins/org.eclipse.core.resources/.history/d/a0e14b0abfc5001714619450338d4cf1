
public class MaxSumPathBinaryTree {

	private Node root;
	int max_num = Integer.MIN_VALUE;
	Node targetLeafNode = null;
	
	int maxSumPath(){
		if(root == null){
			return 0;
		}
		int sum = getTargetLeaf(root, max_num,0);
//		printPath();
		return sum;		
	}
	

	private void getTargetLeaf(Node node, int max_num, int curr_sum) {
		System.out.println("the max num " + max_num);
		if(node == null){
			return;
		}
		curr_sum = curr_sum + node.data;
		if(curr_sum > max_num){
			max_num = curr_sum;
			System.out.println("max sum " + max_num);
		}

		System.out.println(" curr sum " + curr_sum);

		
		if(node.left == null && node.right == null){
			if(curr_sum > max_num){
				max_num = curr_sum;
				targetLeafNode = node;
			}
		}		
		getTargetLeaf(node.left, max_num, curr_sum);
		getTargetLeaf(node.right, max_num, curr_sum);
		
		
	}


	public static void main(String[] args) {
		MaxSumPathBinaryTree t = new MaxSumPathBinaryTree();
		t.root = new Node(2);
		t.root.left = new Node(10);
		t.root.right = new Node(5);
		t.root.left.left = new Node(-2);
		t.root.right.right = new Node(5);
		System.out.println("Max sum of all nodes from root to leaf is " + t.maxSumPath());
	}

}
