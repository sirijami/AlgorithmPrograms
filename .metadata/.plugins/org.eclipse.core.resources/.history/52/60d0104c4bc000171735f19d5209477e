
public class BinarySearchTree {
	Node root;
	
	public BinarySearchTree(){
		root = null;
	}
	
	public static void main(String[] args){
		 BinarySearchTree tree = new BinarySearchTree();
	        tree.root = new Node(1);
	        tree.root.left = new Node(2);
	        tree.root.right = new Node(3);
	        tree.root.left.left = new Node(4);
	        tree.root.left.right = new Node(5);
	        tree.root.right.left = new Node(6);
	        tree.root.right.right = new Node(7);
	        
	        tree.inOrder();
	        tree.CountNodesInRange(2, 10);
	}
	
	void inOrder(){
		inOrderR(root);
	}
	
	void inOrderR(Node node){
		if(node != null){			
			inOrderR(node.left);
			System.out.print(node.data + " ");
			inOrderR(node.right);
		}
		
	}
	
	public int CountNodesInRange(int low, int high){
		return CountNodesInRangeR(root, low, high);		
	}
	
	public int CountNodesInRangeR(Node node, int low, int high){
		if(node == null){
			return 0;
		}
		if(node.data <= high && node.data >= low){
			return 1+ CountNodesInRangeR(node.left,low, high) + CountNodesInRangeR(node.right, low, high);
		}else if(node.data < low){
			return CountNodesInRangeR(node.right, low, high);
		}else
		return CountNodesInRangeR(node.left, low, high);		
	}
	
}

